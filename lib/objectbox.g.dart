// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database/models/booking.dart';
import 'database/models/client.dart';
import 'database/models/room.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 7520474012865463895),
      name: 'Booking',
      lastPropertyId: const obx_int.IdUid(11, 8371261401441985541),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8046335281568048978),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1672242544407059752),
            name: 'uuid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(1, 7669071124941551703)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9066941738657535107),
            name: 'checkIn',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6288767746485742327),
            name: 'checkOut',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3009454904793937401),
            name: 'guestName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 622805619064539816),
            name: 'guestPhone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1629474739835573293),
            name: 'totalPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4623809133289872343),
            name: 'amountPaid',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7695883889984232810),
            name: 'notes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5486172975866724228),
            name: 'paymentStatusIndex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8371261401441985541),
            name: 'roomId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 4990419174667120337),
            relationTarget: 'Room')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 4878212268709779404),
      name: 'Room',
      lastPropertyId: const obx_int.IdUid(8, 8949325354581786019),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6856369794337127914),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7099870373196976688),
            name: 'uuid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(3, 3137801614327634409)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7554763731269502111),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7042765759100825641),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6300482062653804006),
            name: 'capacity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7716817603127183506),
            name: 'basePrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6675029036877619604),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8949325354581786019),
            name: 'statusIndex',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'bookings', srcEntity: 'Booking', srcField: 'room')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 75566934851171950),
      name: 'Client',
      lastPropertyId: const obx_int.IdUid(4, 4277615411837971956),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 391442712632263768),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5657262008090333036),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5743230764565920787),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4277615411837971956),
            name: 'notes',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 75566934851171950),
      lastIndexId: const obx_int.IdUid(3, 3137801614327634409),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Booking: obx_int.EntityDefinition<Booking>(
        model: _entities[0],
        toOneRelations: (Booking object) => [object.room],
        toManyRelations: (Booking object) => {},
        getId: (Booking object) => object.id,
        setId: (Booking object, int id) {
          object.id = id;
        },
        objectToFB: (Booking object, fb.Builder fbb) {
          final uuidOffset = fbb.writeString(object.uuid);
          final guestNameOffset = fbb.writeString(object.guestName);
          final guestPhoneOffset = fbb.writeString(object.guestPhone);
          final notesOffset =
              object.notes == null ? null : fbb.writeString(object.notes!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uuidOffset);
          fbb.addInt64(2, object.checkIn.millisecondsSinceEpoch);
          fbb.addInt64(3, object.checkOut.millisecondsSinceEpoch);
          fbb.addOffset(4, guestNameOffset);
          fbb.addOffset(5, guestPhoneOffset);
          fbb.addFloat64(6, object.totalPrice);
          fbb.addFloat64(7, object.amountPaid);
          fbb.addOffset(8, notesOffset);
          fbb.addInt64(9, object.paymentStatusIndex);
          fbb.addInt64(10, object.room.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uuidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final checkInParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final checkOutParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final guestNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final guestPhoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final totalPriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final amountPaidParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final object = Booking(
              id: idParam,
              uuid: uuidParam,
              checkIn: checkInParam,
              checkOut: checkOutParam,
              guestName: guestNameParam,
              guestPhone: guestPhoneParam,
              totalPrice: totalPriceParam,
              amountPaid: amountPaidParam,
              notes: notesParam)
            ..paymentStatusIndex =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.room.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.room.attach(store);
          return object;
        }),
    Room: obx_int.EntityDefinition<Room>(
        model: _entities[1],
        toOneRelations: (Room object) => [],
        toManyRelations: (Room object) => {
              obx_int.RelInfo<Booking>.toOneBacklink(
                      11, object.id, (Booking srcObject) => srcObject.room):
                  object.bookings
            },
        getId: (Room object) => object.id,
        setId: (Room object, int id) {
          object.id = id;
        },
        objectToFB: (Room object, fb.Builder fbb) {
          final uuidOffset = fbb.writeString(object.uuid);
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uuidOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addInt64(4, object.capacity);
          fbb.addFloat64(5, object.basePrice);
          fbb.addOffset(6, descriptionOffset);
          fbb.addInt64(7, object.statusIndex);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uuidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final capacityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final basePriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final object = Room(
              id: idParam,
              uuid: uuidParam,
              name: nameParam,
              type: typeParam,
              capacity: capacityParam,
              basePrice: basePriceParam,
              description: descriptionParam)
            ..statusIndex =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          obx_int.InternalToManyAccess.setRelInfo<Room>(
              object.bookings,
              store,
              obx_int.RelInfo<Booking>.toOneBacklink(
                  11, object.id, (Booking srcObject) => srcObject.room));
          return object;
        }),
    Client: obx_int.EntityDefinition<Client>(
        model: _entities[2],
        toOneRelations: (Client object) => [],
        toManyRelations: (Client object) => {},
        getId: (Client object) => object.id,
        setId: (Client object, int id) {
          object.id = id;
        },
        objectToFB: (Client object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final phoneOffset = fbb.writeString(object.phone);
          final notesOffset =
              object.notes == null ? null : fbb.writeString(object.notes!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, phoneOffset);
          fbb.addOffset(3, notesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = Client(
              id: idParam,
              name: nameParam,
              phone: phoneParam,
              notes: notesParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Booking] entity fields to define ObjectBox queries.
class Booking_ {
  /// See [Booking.id].
  static final id =
      obx.QueryIntegerProperty<Booking>(_entities[0].properties[0]);

  /// See [Booking.uuid].
  static final uuid =
      obx.QueryStringProperty<Booking>(_entities[0].properties[1]);

  /// See [Booking.checkIn].
  static final checkIn =
      obx.QueryDateProperty<Booking>(_entities[0].properties[2]);

  /// See [Booking.checkOut].
  static final checkOut =
      obx.QueryDateProperty<Booking>(_entities[0].properties[3]);

  /// See [Booking.guestName].
  static final guestName =
      obx.QueryStringProperty<Booking>(_entities[0].properties[4]);

  /// See [Booking.guestPhone].
  static final guestPhone =
      obx.QueryStringProperty<Booking>(_entities[0].properties[5]);

  /// See [Booking.totalPrice].
  static final totalPrice =
      obx.QueryDoubleProperty<Booking>(_entities[0].properties[6]);

  /// See [Booking.amountPaid].
  static final amountPaid =
      obx.QueryDoubleProperty<Booking>(_entities[0].properties[7]);

  /// See [Booking.notes].
  static final notes =
      obx.QueryStringProperty<Booking>(_entities[0].properties[8]);

  /// See [Booking.paymentStatusIndex].
  static final paymentStatusIndex =
      obx.QueryIntegerProperty<Booking>(_entities[0].properties[9]);

  /// See [Booking.room].
  static final room =
      obx.QueryRelationToOne<Booking, Room>(_entities[0].properties[10]);
}

/// [Room] entity fields to define ObjectBox queries.
class Room_ {
  /// See [Room.id].
  static final id = obx.QueryIntegerProperty<Room>(_entities[1].properties[0]);

  /// See [Room.uuid].
  static final uuid = obx.QueryStringProperty<Room>(_entities[1].properties[1]);

  /// See [Room.name].
  static final name = obx.QueryStringProperty<Room>(_entities[1].properties[2]);

  /// See [Room.type].
  static final type = obx.QueryStringProperty<Room>(_entities[1].properties[3]);

  /// See [Room.capacity].
  static final capacity =
      obx.QueryIntegerProperty<Room>(_entities[1].properties[4]);

  /// See [Room.basePrice].
  static final basePrice =
      obx.QueryDoubleProperty<Room>(_entities[1].properties[5]);

  /// See [Room.description].
  static final description =
      obx.QueryStringProperty<Room>(_entities[1].properties[6]);

  /// See [Room.statusIndex].
  static final statusIndex =
      obx.QueryIntegerProperty<Room>(_entities[1].properties[7]);

  /// see [Room.bookings]
  static final bookings = obx.QueryBacklinkToMany<Booking, Room>(Booking_.room);
}

/// [Client] entity fields to define ObjectBox queries.
class Client_ {
  /// See [Client.id].
  static final id =
      obx.QueryIntegerProperty<Client>(_entities[2].properties[0]);

  /// See [Client.name].
  static final name =
      obx.QueryStringProperty<Client>(_entities[2].properties[1]);

  /// See [Client.phone].
  static final phone =
      obx.QueryStringProperty<Client>(_entities[2].properties[2]);

  /// See [Client.notes].
  static final notes =
      obx.QueryStringProperty<Client>(_entities[2].properties[3]);
}
